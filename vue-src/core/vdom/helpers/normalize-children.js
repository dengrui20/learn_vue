/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.   模板编译器试图最小化需要规范化,在编译时静态分析模板。
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 普通的HTML标记,可以完全跳过,因为正常化
// 生成渲染函数保证返回数组< VNode >。有
// 两个额外的规范化情况:


// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.

// 1。当子组件——因为一个功能组件
//可能返回一个数组而不是一个根。在这种情况下, 需要simple normalization,如果任何的子组件是一个数组
// 我们用Array.prototype.concat平整件事情。保证只有1级深因为功能组件已经正常化自己的孩子。


export function simpleNormalizeChildren (children: any) {
  // 将2层深度的数组 转换成一层
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.

// 2. 当children生成包含结构嵌套的数组,
// 例如<template>, <slot>, v-for,或者当children是由用户提供的
// 与手写 render 函数/ JSX渲染功能。在这种情况下完全正常化
// 需要迎合所有可能的children类型值。
// 将父子结构转换成多维数组

export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    last = res[res.length - 1]
    //  nested
    if (Array.isArray(c)) {
      // 子节点是数组 递归调用
      res.push.apply(res, normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`))
    } else if (isPrimitive(c)) {

      if (isDef(last) && isDef(last.text)) {
        //如果上一个childred 的最后一个节点和 c是基础类型 直接拼接
        //如果存在两个连续的 text 节点，会把它们合并成一个 text 节点
        last.text += String(c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 创建一个文本vnode
        res.push(createTextVNode(c))
      }
    } else {
      if (isDef(c.text) && isDef(last) && isDef(last.text)) {
        res[res.length - 1] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 嵌套数组 默认的key 例如 v-for
        if (isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
